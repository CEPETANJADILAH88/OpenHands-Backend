#!/usr/bin/env python3
"""
üîß Environment Setup Helper
Memudahkan setup environment variables untuk deployment
"""

import os
import sys
from pathlib import Path

def print_banner():
    print("üîß" + "="*50)
    print("üöÄ OpenHands Environment Setup Helper")
    print("üì± Mobile-Friendly Configuration")
    print("="*52)

def create_env_file():
    """Create .env file with default values"""
    env_content = """# üîß OpenHands Backend Environment Variables
# Generated by setup_env.py

# ===== Required Configuration =====
LLM_API_KEY=your_openrouter_api_key_here
LLM_MODEL=openrouter/anthropic/claude-3-haiku-20240307
LLM_BASE_URL=https://openrouter.ai/api/v1

# ===== Runtime Configuration =====
OPENHANDS_RUNTIME=e2b
E2B_API_KEY=your_e2b_api_key_here

# ===== Server Configuration =====
PORT=7860
HOST=0.0.0.0
DEBUG=false

# ===== Agent Configuration =====
MAX_ITERATIONS=30
DEFAULT_AGENT=CodeActAgent

# ===== Storage (HF Spaces optimized) =====
FILE_STORE_PATH=/tmp/file_store
CACHE_DIR=/tmp/cache

# ===== Security =====
CORS_ORIGINS=*
RATE_LIMIT=60

# ===== Optional Services =====
# GITHUB_TOKEN=your_github_token
# OPENAI_API_KEY=your_openai_key
# ANTHROPIC_API_KEY=your_anthropic_key

# ===== Monitoring =====
ENABLE_TELEMETRY=false
LOG_LEVEL=INFO
"""
    
    env_file = Path('.env')
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists")
        response = input("Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Cancelled")
            return False
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file")
    return True

def check_hf_space_env():
    """Check HF Space environment variables"""
    print("\nü§ó Hugging Face Spaces Environment Check:")
    
    hf_vars = {
        'LLM_API_KEY': 'Your OpenRouter/LLM API key',
        'LLM_MODEL': 'LLM model to use',
        'LLM_BASE_URL': 'LLM API base URL'
    }
    
    print("\nRequired variables for HF Spaces:")
    for var, desc in hf_vars.items():
        print(f"  üìù {var} = {desc}")
    
    print("\nüí° Set these in your HF Space Settings ‚Üí Variables")

def check_github_secrets():
    """Check GitHub Secrets for auto-deploy"""
    print("\nü§ñ GitHub Actions Auto-Deploy Setup:")
    
    github_secrets = {
        'HF_TOKEN': 'Hugging Face API token',
        'HF_USERNAME': 'Your HF username',
        'HF_SPACE_NAME': 'Target space name'
    }
    
    print("\nRequired GitHub Secrets:")
    for secret, desc in github_secrets.items():
        print(f"  üîê {secret} = {desc}")
    
    print("\nüí° Set these in GitHub Repository ‚Üí Settings ‚Üí Secrets")

def validate_current_env():
    """Validate current environment"""
    print("\nüîç Current Environment Validation:")
    
    # Check .env file
    env_file = Path('.env')
    if env_file.exists():
        print("  ‚úÖ .env file exists")
        
        # Read and check key variables
        with open('.env', 'r') as f:
            content = f.read()
            
        required_vars = ['LLM_API_KEY', 'LLM_MODEL', 'PORT']
        for var in required_vars:
            if f"{var}=" in content and "your_" not in content.split(f"{var}=")[1].split('\n')[0]:
                print(f"  ‚úÖ {var} is configured")
            else:
                print(f"  ‚ö†Ô∏è  {var} needs configuration")
    else:
        print("  ‚ùå .env file not found")
    
    # Check system environment
    print("\nüñ•Ô∏è  System Environment:")
    system_vars = ['LLM_API_KEY', 'PORT', 'HF_TOKEN']
    for var in system_vars:
        if os.getenv(var):
            print(f"  ‚úÖ {var} is set")
        else:
            print(f"  ‚ö†Ô∏è  {var} not set")

def show_deployment_checklist():
    """Show deployment checklist"""
    print("\nüìã Deployment Checklist:")
    
    checklist = [
        "‚úÖ Set LLM_API_KEY in HF Space environment",
        "‚úÖ Set LLM_MODEL and LLM_BASE_URL",
        "‚úÖ Configure GitHub Secrets for auto-deploy",
        "‚úÖ Test local environment with .env file",
        "‚úÖ Validate all required files exist",
        "‚úÖ Push to main branch to trigger deploy"
    ]
    
    for item in checklist:
        print(f"  {item}")

def interactive_setup():
    """Interactive environment setup"""
    print("\nüéØ Interactive Setup:")
    
    # Get LLM API key
    api_key = input("\nüîë Enter your OpenRouter API key (or press Enter to skip): ").strip()
    
    # Get HF details
    hf_username = input("ü§ó Enter your HF username (or press Enter to skip): ").strip()
    hf_space = input("üè† Enter your HF space name (or press Enter to skip): ").strip()
    
    if api_key or hf_username or hf_space:
        print("\nüìù Generating configuration...")
        
        # Update .env file
        env_content = f"""# üîß OpenHands Backend Environment Variables
# Generated by interactive setup

# ===== Required Configuration =====
LLM_API_KEY={api_key or 'your_openrouter_api_key_here'}
LLM_MODEL=openrouter/anthropic/claude-3-haiku-20240307
LLM_BASE_URL=https://openrouter.ai/api/v1

# ===== Server Configuration =====
PORT=7860
HOST=0.0.0.0
DEBUG=false

# ===== Agent Configuration =====
MAX_ITERATIONS=30
DEFAULT_AGENT=CodeActAgent

# ===== Storage =====
FILE_STORE_PATH=/tmp/file_store
CACHE_DIR=/tmp/cache

# ===== Hugging Face =====
HF_USERNAME={hf_username or 'your_hf_username'}
HF_SPACE_NAME={hf_space or 'your_space_name'}

# ===== Security =====
CORS_ORIGINS=*
RATE_LIMIT=60
"""
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Updated .env file with your settings")
        
        if hf_username and hf_space:
            space_url = f"https://{hf_username}-{hf_space}.hf.space"
            print(f"üîó Your space URL will be: {space_url}")
    else:
        print("‚ö†Ô∏è  No configuration provided, using defaults")

def main():
    print_banner()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'create':
            create_env_file()
        elif command == 'check':
            validate_current_env()
        elif command == 'hf':
            check_hf_space_env()
        elif command == 'github':
            check_github_secrets()
        elif command == 'interactive':
            interactive_setup()
        else:
            print(f"‚ùå Unknown command: {command}")
            print("Available commands: create, check, hf, github, interactive")
    else:
        # Default: show all information
        validate_current_env()
        check_hf_space_env()
        check_github_secrets()
        show_deployment_checklist()
        
        print("\nüéØ Quick Actions:")
        print("  python setup_env.py create      - Create .env file")
        print("  python setup_env.py interactive - Interactive setup")
        print("  python setup_env.py check       - Validate environment")

if __name__ == "__main__":
    main()